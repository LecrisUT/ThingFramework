name: test
run-name: Run tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_call:

jobs:
  ctest:
    runs-on: ubuntu-latest
    container: fedora
    strategy:
      matrix:
        # Only llvm is currently supported
#        toolchain: [ gcc, intel, llvm ]
        toolchain: [ llvm ]
    steps:
      - name: Install common packages
        run: |
          sudo dnf -y install ninja-build git
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # workaround for https://github.com/actions/runner/issues/2033
      - name: ownership workaround
        run: git config --system --add safe.directory '*'

      ## Install toolchains
      - name: Install GCC packages
        run: |
          sudo dnf -y install g++
        if: matrix.toolchain == 'gcc'
      - name: Install LLVM compilers
        # TODO: Currently using gfortran because flang tests fail. See #241 for more details
        run: |
          sudo dnf install -y clang clang-tools-extra lld
        if: matrix.toolchain == 'llvm'
      - name: Install Intel compiler pre-requisites
        # findutils and procps are needed by intel compiler to run setvars.sh
        # Intel does not have a ld program, so we need them from binutils, but binutils does not work without gcc
        run: |
          sudo dnf -y install findutils procps binutils gcc g++
        if: matrix.toolchain == 'intel'
      # Instructions for linux CI are adapted from upstream: https://github.com/oneapi-src/oneapi-ci (build_linux_dnf_cpp)
      - name: Add Intel compiler repository and get versioned dependencies of dnf packages
        run: |
          tee > /tmp/oneAPI.repo << EOF
          [oneAPI]
          name=Intel(R) oneAPI repository
          baseurl=https://yum.repos.intel.com/oneapi
          enabled=1
          gpgcheck=1
          repo_gpgcheck=1
          gpgkey=https://yum.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          EOF
          sudo mv /tmp/oneAPI.repo /etc/yum.repos.d/
          dnf -y repoquery --deplist intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic intel-oneapi-compiler-fortran | tee depends.txt
        if: matrix.toolchain == 'intel'
      - name: Cache Intel compiler
        id: cache-install
        uses: actions/cache@v3
        with:
          path: |
            /opt/intel/oneapi
          key: Intel-Compiler-${{ hashFiles('**/depends.txt') }}
        if: matrix.toolchain == 'intel'
      - name: Install Intel compiler
        run: |
          sudo dnf install -y intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic intel-oneapi-compiler-fortran
        if: matrix.toolchain == 'intel' && steps.cache-install.outputs.cache-hit != 'true'
      - name: Activate Intel compilers
        # Not elegant, it will propagate all environment variable.
        # Intel does not provide a way to output the environment variables to a file
        # Note: PATH needs to be exported to GITHUB_PATH otherwise it can be overwritten
        run: |
          source /opt/intel/oneapi/setvars.sh
          printenv >> $GITHUB_ENV
          echo $PATH >> $GITHUB_PATH
        if: matrix.toolchain == 'intel'

      ## Main
      - uses: lukka/get-cmake@latest
      - name: Run CMake configuration for ${{ matrix.toolchain }} toolchain
        uses: lukka/run-cmake@v10.3
        with:
          workflowPreset: "${{ matrix.toolchain }}-ci"
      # Not sure about this step
      - name: Remove unused files from Intel cache
        run: |
          LATEST_VERSION=$(ls -1 /opt/intel/oneapi/compiler/ | grep -v latest | sort | tail -1)
          sudo rm -rf /opt/intel/oneapi/compiler/"$LATEST_VERSION"/linux/compiler/lib/ia32_lin
          sudo rm -rf /opt/intel/oneapi/compiler/"$LATEST_VERSION"/linux/bin/ia32
          sudo rm -rf /opt/intel/oneapi/compiler/"$LATEST_VERSION"/linux/lib/emu
          sudo rm -rf /opt/intel/oneapi/compiler/"$LATEST_VERSION"/linux/lib/oclfpga
        if: matrix.toolchain == 'intel' && steps.cache-install.outputs.cache-hit != 'true'

  coverage:
    runs-on: ubuntu-latest
    needs: [ ctest ]
    container: fedora
    steps:
      - name: Install common packages
        run: |
          sudo dnf -y install ninja-build git clang clang-tools-extra lld llvm
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # workaround for https://github.com/actions/runner/issues/2033
      - name: ownership workaround
        run: git config --system --add safe.directory '*'
      - uses: lukka/get-cmake@latest
      - name: Get test coverage
        uses: lukka/run-cmake@v10.3
        with:
          workflowPreset: ci-coverage
      - name: Get llvm-cov data
        run: |
          llvm-profdata merge -sparse $(find ./cmake-build-coverage -name *.profraw) -o coverage.profdata
          llvm-cov export ./cmake-build-coverage/libThingFramework.so -instr-profile=./coverage.profdata --format lcov > coverage.info
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          name: Test coverage
          files: coverage.info
          verbose: true
